<h1>Productos en Tiempo Real (DB)</h1>

<div style="margin-top: 20px;">
  <a href="/products">Volver a inicio</a>
</div>

<h2>Agregar Producto</h2>
<form id="add-product-form">
    <input type="text" id="title" placeholder="Título" required>
    <input type="text" id="description" placeholder="Descripción" required>
    <input type="text" id="code" placeholder="Código" required>
    <input type="number" id="price" placeholder="Precio" required>
    <input type="number" id="stock" placeholder="Stock" required>
    <input type="text" id="category" placeholder="Categoría" required>
    <input type="text" id="thumbnail" placeholder="URL de la imagen">
    <button type="submit">Agregar</button>
</form>

<ul id="product-list">
    {{#each products}}
        <li id="product-{{this._id}}">
            <strong>{{this.title}}</strong> - ${{this.price}}
            <p>Stock actual: {{this.stock}}</p>
            <img src="{{this.thumbnail}}" alt="{{this.title}}" width="100">

            {{#if (eq ../user.role 'admin')}}
                <form class="update-stock-form" data-product-id="{{this._id}}">
                    <input 
                        type="number" 
                        name="stock" 
                        min="0" 
                        placeholder="Nuevo stock" 
                        required
                    >
                    <button type="submit">Actualizar Stock</button>
                </form>
            {{/if}}

            <button onclick="deleteProduct('{{this._id}}')">Eliminar producto</button>
        </li>
    {{else}}
        <p>No hay productos disponibles.</p>
    {{/each}}
</ul>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const isAdmin = {{#if user}}{{#eq user.role 'admin'}}true{{else}}false{{/eq}}{{else}}false{{/if}};

    function setupStockForms() {
        document.querySelectorAll('.update-stock-form').forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const productId = form.dataset.productId;
                const newStock = parseInt(form.stock.value);

                try {
                    const response = await fetch(`/api/products/${productId}/stock`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ stock: newStock })
                    });

                    if (response.ok) {
                        socket.emit('updateStock', productId, newStock);
                        form.stock.value = '';
                    } else {
                        const error = await response.json();
                        alert(`Error: ${error.message}`);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error al actualizar el stock');
                }
            });
        });
    }

    socket.on('updateStock', (productId, newStock) => {
        const productElement = document.getElementById(`product-${productId}`);
        if (productElement) {
            const stockElement = productElement.querySelector('p');
            stockElement.textContent = `Stock actual: ${newStock}`;
        }
    });

    socket.on('updateProducts', (products) => {
        const list = document.getElementById('product-list');
        list.innerHTML = products.map(p => `
            <li id="product-${p._id}">
                <strong>${p.title}</strong> - $${p.price}
                <p>Stock actual: ${p.stock}</p>
                <img src="${p.thumbnail || ''}" alt="${p.title}" width="100">
                ${isAdmin ? `
                    <form class="update-stock-form" data-product-id="${p._id}">
                        <input type="number" name="stock" min="0" placeholder="Nuevo stock" required>
                        <button type="submit">Actualizar Stock</button>
                    </form>
                ` : ''}
                <button onclick="deleteProduct('${p._id}')">Eliminar producto</button>
            </li>
        `).join('');

        setupStockForms();
    });

    setupStockForms();

    document.getElementById('add-product-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        const product = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            code: document.getElementById('code').value,
            price: parseFloat(document.getElementById('price').value),
            stock: parseInt(document.getElementById('stock').value),
            category: document.getElementById('category').value,
            thumbnail: document.getElementById('thumbnail').value || undefined,
        };
        
        try {
            const response = await fetch('/api/products', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(product)
            });
            
            if (response.ok) {
                e.target.reset();
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });

    function deleteProduct(id) {
        fetch(`/api/products/${id}`, { method: 'DELETE' })
            .then(res => {
                if (!res.ok) throw new Error('Error eliminando producto');
            })
            .catch(error => console.error(error));
    }
</script>